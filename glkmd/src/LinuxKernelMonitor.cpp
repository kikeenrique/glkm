// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "LinuxKernelMonitor.hpp"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



LinuxKernelMonitor_ptr LinuxKernelMonitor_Helper::_nil() {
  return ::LinuxKernelMonitor::_nil();
}

::CORBA::Boolean LinuxKernelMonitor_Helper::is_nil(::LinuxKernelMonitor_ptr p) {
  return ::CORBA::is_nil(p);

}

void LinuxKernelMonitor_Helper::release(::LinuxKernelMonitor_ptr p) {
  ::CORBA::release(p);
}

void LinuxKernelMonitor_Helper::marshalObjRef(::LinuxKernelMonitor_ptr obj, cdrStream& s) {
  ::LinuxKernelMonitor::_marshalObjRef(obj, s);
}

LinuxKernelMonitor_ptr LinuxKernelMonitor_Helper::unmarshalObjRef(cdrStream& s) {
  return ::LinuxKernelMonitor::_unmarshalObjRef(s);
}

void LinuxKernelMonitor_Helper::duplicate(::LinuxKernelMonitor_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

LinuxKernelMonitor_ptr
LinuxKernelMonitor::_duplicate(::LinuxKernelMonitor_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

LinuxKernelMonitor_ptr
LinuxKernelMonitor::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


LinuxKernelMonitor_ptr
LinuxKernelMonitor::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

LinuxKernelMonitor_ptr
LinuxKernelMonitor::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_LinuxKernelMonitor _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_LinuxKernelMonitor* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_LinuxKernelMonitor;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* LinuxKernelMonitor::_PD_repoId = "IDL:LinuxKernelMonitor:1.0";


_objref_LinuxKernelMonitor::~_objref_LinuxKernelMonitor() {
  
}


_objref_LinuxKernelMonitor::_objref_LinuxKernelMonitor(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::LinuxKernelMonitor::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
_objref_LinuxKernelMonitor::_ptrToObjRef(const char* id)
{
  if( id == ::LinuxKernelMonitor::_PD_repoId )
    return (::LinuxKernelMonitor_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::LinuxKernelMonitor::_PD_repoId) )
    return (::LinuxKernelMonitor_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cLinuxKernelMonitor_mStringList
class _0RL_cd_47cbb12f00900a52_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_47cbb12f00900a52_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  LinuxKernelMonitor::StringList_var result;
};

void _0RL_cd_47cbb12f00900a52_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const LinuxKernelMonitor::StringList&) result >>= _n;

}

void _0RL_cd_47cbb12f00900a52_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new LinuxKernelMonitor::StringList;
  (LinuxKernelMonitor::StringList&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_47cbb12f00900a52_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_47cbb12f00900a52_00000000* tcd = (_0RL_cd_47cbb12f00900a52_00000000*)cd;
  _impl_LinuxKernelMonitor* impl = (_impl_LinuxKernelMonitor*) svnt->_ptrToInterface(LinuxKernelMonitor::_PD_repoId);
  tcd->result = impl->GetAllProcesses();


}

LinuxKernelMonitor::StringList* _objref_LinuxKernelMonitor::GetAllProcesses()
{
  _0RL_cd_47cbb12f00900a52_00000000 _call_desc(_0RL_lcfn_47cbb12f00900a52_10000000, "GetAllProcesses", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
_pof_LinuxKernelMonitor::~_pof_LinuxKernelMonitor() {}


omniObjRef*
_pof_LinuxKernelMonitor::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_LinuxKernelMonitor(ior, id);
}


::CORBA::Boolean
_pof_LinuxKernelMonitor::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::LinuxKernelMonitor::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_LinuxKernelMonitor _the_pof_LinuxKernelMonitor;

_impl_LinuxKernelMonitor::~_impl_LinuxKernelMonitor() {}


::CORBA::Boolean
_impl_LinuxKernelMonitor::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "GetAllProcesses") ) {

    _0RL_cd_47cbb12f00900a52_00000000 _call_desc(_0RL_lcfn_47cbb12f00900a52_10000000, "GetAllProcesses", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_LinuxKernelMonitor::_ptrToInterface(const char* id)
{
  if( id == ::LinuxKernelMonitor::_PD_repoId )
    return (::_impl_LinuxKernelMonitor*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::LinuxKernelMonitor::_PD_repoId) )
    return (::_impl_LinuxKernelMonitor*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_LinuxKernelMonitor::_mostDerivedRepoId()
{
  return ::LinuxKernelMonitor::_PD_repoId;
}

_sk_LinuxKernelMonitor::_sk_LinuxKernelMonitor(const omniOrbBoaKey& k) { pd_key = k; }

_sk_LinuxKernelMonitor::~_sk_LinuxKernelMonitor() {}

POA_LinuxKernelMonitor::~POA_LinuxKernelMonitor() {}

// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "LinuxKernelMonitor.hpp"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_LinuxKernelMonitor_mStringList = CORBA::TypeCode::PR_alias_tc("IDL:LinuxKernelMonitor/StringList:1.0", "StringList", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr LinuxKernelMonitor::_tc_StringList = _0RL_tc_LinuxKernelMonitor_mStringList;

const CORBA::TypeCode_ptr _tc_LinuxKernelMonitor = CORBA::TypeCode::PR_interface_tc("IDL:LinuxKernelMonitor:1.0", "LinuxKernelMonitor", &_0RL_tcTrack);

static void _0RL_LinuxKernelMonitor_mStringList_marshal_fn(cdrStream& _s, void* _v)
{
  LinuxKernelMonitor::StringList* _p = (LinuxKernelMonitor::StringList*)_v;
  *_p >>= _s;
}
static void _0RL_LinuxKernelMonitor_mStringList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  LinuxKernelMonitor::StringList* _p = new LinuxKernelMonitor::StringList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_LinuxKernelMonitor_mStringList_destructor_fn(void* _v)
{
  LinuxKernelMonitor::StringList* _p = (LinuxKernelMonitor::StringList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const LinuxKernelMonitor::StringList& _s)
{
  LinuxKernelMonitor::StringList* _p = new LinuxKernelMonitor::StringList(_s);
  _a.PR_insert(_0RL_tc_LinuxKernelMonitor_mStringList,
               _0RL_LinuxKernelMonitor_mStringList_marshal_fn,
               _0RL_LinuxKernelMonitor_mStringList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor::StringList* _sp)
{
  _a.PR_insert(_0RL_tc_LinuxKernelMonitor_mStringList,
               _0RL_LinuxKernelMonitor_mStringList_marshal_fn,
               _0RL_LinuxKernelMonitor_mStringList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, LinuxKernelMonitor::StringList*& _sp)
{
  return _a >>= (const LinuxKernelMonitor::StringList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const LinuxKernelMonitor::StringList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_LinuxKernelMonitor_mStringList,
                    _0RL_LinuxKernelMonitor_mStringList_unmarshal_fn,
                    _0RL_LinuxKernelMonitor_mStringList_marshal_fn,
                    _0RL_LinuxKernelMonitor_mStringList_destructor_fn,
                    _v)) {
    _sp = (const LinuxKernelMonitor::StringList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_LinuxKernelMonitor_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_LinuxKernelMonitor_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(LinuxKernelMonitor::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_LinuxKernelMonitor_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor_ptr _o)
{
  LinuxKernelMonitor_ptr _no = LinuxKernelMonitor::_duplicate(_o);
  _a.PR_insert(_tc_LinuxKernelMonitor,
               _0RL_LinuxKernelMonitor_marshal_fn,
               _0RL_LinuxKernelMonitor_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor_ptr* _op)
{
  _a.PR_insert(_tc_LinuxKernelMonitor,
               _0RL_LinuxKernelMonitor_marshal_fn,
               _0RL_LinuxKernelMonitor_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = LinuxKernelMonitor::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, LinuxKernelMonitor_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_LinuxKernelMonitor,
                    _0RL_LinuxKernelMonitor_unmarshal_fn,
                    _0RL_LinuxKernelMonitor_marshal_fn,
                    _0RL_LinuxKernelMonitor_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (LinuxKernelMonitor_ptr)_r->_ptrToObjRef(LinuxKernelMonitor::_PD_repoId);
    else
      _o = LinuxKernelMonitor::_nil();
    return 1;
  }
  return 0;
}

