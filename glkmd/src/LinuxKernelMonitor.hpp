// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __LinuxKernelMonitor_hh__
#define __LinuxKernelMonitor_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __LinuxKernelMonitor__
#define __LinuxKernelMonitor__

class LinuxKernelMonitor;
class _objref_LinuxKernelMonitor;
class _impl_LinuxKernelMonitor;
class _sk_LinuxKernelMonitor;
typedef _objref_LinuxKernelMonitor* LinuxKernelMonitor_ptr;
typedef LinuxKernelMonitor_ptr LinuxKernelMonitorRef;

class LinuxKernelMonitor_Helper {
public:
  typedef LinuxKernelMonitor_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_LinuxKernelMonitor, LinuxKernelMonitor_Helper> LinuxKernelMonitor_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_LinuxKernelMonitor,LinuxKernelMonitor_Helper > LinuxKernelMonitor_out;

#endif

// interface LinuxKernelMonitor
class LinuxKernelMonitor {
public:
  // Declarations for this interface type.
  typedef LinuxKernelMonitor_ptr _ptr_type;
  typedef LinuxKernelMonitor_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringList;

  class StringList_var;

  class StringList : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StringList_var _var_type;
    inline StringList() {}
    inline StringList(const StringList& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StringList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StringList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StringList& operator = (const StringList& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StringList_out;

  class StringList_var {
  public:
    inline StringList_var() : _pd_seq(0) {}
    inline StringList_var(StringList* _s) : _pd_seq(_s) {}
    inline StringList_var(const StringList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StringList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StringList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StringList_var& operator = (StringList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StringList_var& operator = (const StringList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StringList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StringList* operator -> () { return _pd_seq; }
    inline const StringList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StringList& () const { return *_pd_seq; }
#else
    inline operator const StringList& () const { return *_pd_seq; }
    inline operator StringList& () { return *_pd_seq; }
#endif
      
    inline const StringList& in() const { return *_pd_seq; }
    inline StringList&       inout()    { return *_pd_seq; }
    inline StringList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StringList* _retn() { StringList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StringList_out;
    
  private:
    StringList* _pd_seq;
  };

  class StringList_out {
  public:
    inline StringList_out(StringList*& _s) : _data(_s) { _data = 0; }
    inline StringList_out(StringList_var& _s)
      : _data(_s._pd_seq) { _s = (StringList*) 0; }
    inline StringList_out(const StringList_out& _s) : _data(_s._data) {}
    inline StringList_out& operator = (const StringList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StringList_out& operator = (StringList* _s) {
      _data = _s;
      return *this;
    }
    inline operator StringList*&()  { return _data; }
    inline StringList*& ptr()       { return _data; }
    inline StringList* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StringList*& _data;

  private:
    StringList_out();
    StringList_out& operator=(const StringList_var&);
  };


};

class _objref_LinuxKernelMonitor :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  LinuxKernelMonitor::StringList* GetAllProcesses();

  inline _objref_LinuxKernelMonitor()  { _PR_setobj(0); }  // nil
  _objref_LinuxKernelMonitor(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_LinuxKernelMonitor();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_LinuxKernelMonitor(const _objref_LinuxKernelMonitor&);
  _objref_LinuxKernelMonitor& operator = (const _objref_LinuxKernelMonitor&);
  // not implemented

  friend class LinuxKernelMonitor;
};

class _pof_LinuxKernelMonitor : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_LinuxKernelMonitor() : _OMNI_NS(proxyObjectFactory)(LinuxKernelMonitor::_PD_repoId) {}
  virtual ~_pof_LinuxKernelMonitor();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_LinuxKernelMonitor :
  public virtual omniServant
{
public:
  virtual ~_impl_LinuxKernelMonitor();

  virtual LinuxKernelMonitor::StringList* GetAllProcesses() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


class _sk_LinuxKernelMonitor :
  public virtual _impl_LinuxKernelMonitor,
  public virtual omniOrbBoaServant
{
public:
  _sk_LinuxKernelMonitor() {}
  _sk_LinuxKernelMonitor(const omniOrbBoaKey&);
  virtual ~_sk_LinuxKernelMonitor();
  inline LinuxKernelMonitor::_ptr_type _this() {
    return (LinuxKernelMonitor::_ptr_type) omniOrbBoaServant::_this(LinuxKernelMonitor::_PD_repoId);
  }

};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LinuxKernelMonitor;



class POA_LinuxKernelMonitor :
  public virtual _impl_LinuxKernelMonitor,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_LinuxKernelMonitor();

  inline ::LinuxKernelMonitor_ptr _this() {
    return (::LinuxKernelMonitor_ptr) _do_this(::LinuxKernelMonitor::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const LinuxKernelMonitor::StringList& _s);
void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor::StringList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, LinuxKernelMonitor::StringList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const LinuxKernelMonitor::StringList*& _sp);

void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor_ptr _s);
void operator<<=(::CORBA::Any& _a, LinuxKernelMonitor_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, LinuxKernelMonitor_ptr& _s);



inline void
LinuxKernelMonitor::_marshalObjRef(::LinuxKernelMonitor_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_LinuxKernelMonitor
#endif

#endif  // __LinuxKernelMonitor_hh__

