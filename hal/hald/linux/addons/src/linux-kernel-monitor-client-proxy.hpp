
/*
 *	This file was automatically generated by dbusmm-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusmm__linux_kernel_monitor_client_proxy_hpp__PROXY_MARSHAL_H
#define __dbusmm__linux_kernel_monitor_client_proxy_hpp__PROXY_MARSHAL_H

#include <dbusmm/dbus.h>

namespace org {
namespace freedesktop {
namespace Hal {
namespace Device {

class LinuxKernelMonitor
 : public ::DBus::InterfaceProxy
{
public:

    LinuxKernelMonitor()
    : ::DBus::InterfaceProxy("org.freedesktop.Hal.Device.LinuxKernelMonitor")
    {
    }

public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< ::DBus::String > GetAllProcesses(  )
    {
        ::DBus::CallMessage call;
        call.member("GetAllProcesses");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::String > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::String Hello( const ::DBus::String& name )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("Hello");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::String argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
#endif//__dbusmm__linux_kernel_monitor_client_proxy_hpp__PROXY_MARSHAL_H
